l = [-1] * 20 # 왼쪽 자식
r = [-1] * 20 # 오른쪽 자식
val = [] # 양/늑대 값
n = 0
ans = 1
vis = [0] * (1 << 17) # vis[x] : 상태 x를 방문했는가?

def solve(state):
    global ans
    if vis[state]: return None
    vis[state] = 1
    # wolf : 늑대의 수, num : 전체 정점의 수
    wolf, num = 0, 0
    for i in range(n):
        if state & (1 << i):
            num += 1
            wolf += val[i]
    # 만약 늑대가 절반 이상일 경우 방문할 수 없는 상태이니 종료
    if 2*wolf >= num: return None
    # 현재 state의 양의 수가 ans보다 클 경우 ans를 갱신
    ans = max(ans, num - wolf)
    
    # 이제 다음 상태로 넘어갈 시간
    for i in range(n):
        if not state & (1<<i):
            continue
        # 현재 보고 있는 i번째 정점의 left가 있다면
        if l[i] != -1:
            solve(state | (1<<l[i]))
        if r[i] != -1:
            solve(state | (1<<r[i]))
    

def solution(info, edges):
    global n, val
    n = len(info)
    val = info[:]
    for u, v in edges:
        if l[u] == -1: l[u] = v
        else: r[u] = v
    
    solve(1)
    return ans

##BFS

# 양, 늑대, 이진트리 그래프탐색

from collections import deque


def solution(info, edges):
    answer = 0
    n = len(info)
    tree = {i: [] for i in range(n)}
    for p, s in edges:
        tree[p].append(s)
    q = deque([[0, tree[0], 1, 0]])
    while q:
        now, can_move, sheep, wolf = q.popleft()
        if answer < sheep:
            answer = sheep
        for i, node in enumerate(can_move):
            if info[node] == 1:
                if sheep > wolf + 1:
                    q.append([node, can_move[:i] + can_move[i + 1:] + tree[node], sheep, wolf + 1])
            else:
                q.append([node, can_move[:i] + can_move[i + 1:] + tree[node], sheep + 1, wolf])

    return answer


#내가 푼 풀이는 tree를 만들어서 완전탐색과 같이 풀려고했는데 dfs나 bfs가 부족한것인지 백트래킹구현이 쉽지않았음.
#실제로 백트래킹을 구현하면 문제가 풀린다하는데 구현못함. -> dfs bfs 재귀 공부


from collections import deque
class btree():
    def __init__(self):
        self.index=None
        self.parent=None
        self.left=None
        self.right=None
        self.data=None
def check(bt,l,w):
    if bt.data == 0:
        if l+1<=w:
            return 0
        else:
            return 1
    if bt.data ==1:
        if l<=w+1:
            return 0
        else:
            return 1
def check_avail(visit,avail,my_info,l,w):
    for i,v in enumerate(visit):
        if v == 1:
            if my_info[i].left !=None:
                if check(my_info[i].left,l,w):
                    avail[my_info[i].left.index]=1
                else:
                    avail[my_info[i].left.index]=0
            if my_info[i].right !=None:
                if check(my_info[i].right,l,w):
                    avail[my_info[i].right.index]=1
                else:
                    avail[my_info[i].right.index]=0
    return avail
def solution(infos, edges):
    l,w=0,0
    my_info=[]
    for i,info in enumerate(infos):
        bt=btree()
        bt.index=i
        bt.data=info
        my_info.append(bt)
    for edge in edges:
        if my_info[edge[0]].left == None:
            my_info[edge[1]].parent=my_info[edge[0]]
            my_info[edge[0]].left=my_info[edge[1]]
        elif my_info[edge[0]].left.index>edge[1] : 
            my_info[edge[1]].parent=my_info[edge[0]]
            my_info[edge[0]].right=my_info[edge[0]].left
            my_info[edge[0]].left=my_info[edge[1]]
        else:
            my_info[edge[1]].parent=my_info[edge[0]]
            my_info[edge[0]].right=my_info[edge[1]]
    ans,l,w=1,1,0
    avail=[0 for x in range(len(my_info))]
    visit=[0 for x in range(len(my_info))]
    visit[0]=1
    avail=check_avail(visit,avail,my_info,l,w)
    #갈수있는곳이 없으면 0
    while sum(avail)!=0:
        for i,a in enumerate(avail):
            #갈수있는곳 + 양
            if a == 1 and my_info[i].data == 0:
                avail[i]=0
                visit[i]=1
                l+=1
                avail=check_avail(visit,avail,my_info,l,w)
                break
        else:
            for i,a in enumerate(avail):
                #갈수있는곳 + 늑대
                if a == 1 :
                    avail[i]=0
                    visit[i]=1
                    w+=1
                    avail=check_avail(visit,avail,my_info,l,w)
                    break
            
            
    return l