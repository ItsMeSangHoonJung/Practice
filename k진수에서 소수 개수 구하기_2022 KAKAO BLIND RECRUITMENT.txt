#처음에는 0을 기억하는 배열을 사용하고 그것을 통해서 숫자들을 뽑아냈는데
#생각해보니 split("0")하는게 더 편해보였음 실제로 적용하니 더 깔끔 + 쉬움
from collections import deque
def check(num):
    if (num == 1 or num == 0):
        return 0
    for i in range(2,100):   
        if(num<=i):
            break
        if(num%i==0):
            return 0 #소수 아님
    return 1 #소수 

def ntok(n,k):
    if(k==1):
        return str(n)
    result=" "
    answer=deque()
    answer.append(int(n%k))
    while (n-n%k)!=0:
        n=(n-n%k)/k
        answer.appendleft(int(n%k))
    for n in answer:
        result+=str(n) 
    
    return result.strip()

def solution(n, k):
    answer = 0
    number = ntok(n,k)
    remember_zero=[]
    for i,n in enumerate(number):
        if(n=='0'):
            remember_zero.append(i)
    print(number)
    remember_number=[]
    remember_number=number.split("0")
    print(remember_number)
    for i in remember_number:
        if(i == ''):
            continue
        if(check(int(i))==1):
            answer+=1
    """
    print(remember_zero)
    j=0
    for i in remember_zero:
        print(j,":",i," ",int(number[j:i]))
        if (1==check(int(number[j:i]))):
            answer+=1
        j=i
    print(j,":",len(number)-1," ",int(number[j:]))
    if(1==check(int(number[j:]))):
        answer+=1
    """  
    return answer