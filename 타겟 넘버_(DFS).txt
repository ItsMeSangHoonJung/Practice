#이렇게 풀수있음 
from itertools import product
def solution(numbers, target):
    answer = 0
    for pl in product(('+','-'),repeat=(len(numbers))):
        sum=0
        for i in range(len(numbers)):
            if pl[i]=='+':
                sum+=numbers[i]
            else:
                sum-=numbers[i]
            if(target<sum):
                continue
        if(target==sum):
            answer+=1
    return answer

#하지만 이렇게 아래처럼 구현해서 시간복잡도를 줄일수있음 product(*l)

from itertools import product
def solution(numbers, target):
    l = [(x, -x) for x in numbers]
    s = list(map(sum, product(*l)))
    return s.count(target)

#다른 방법으로는 아래처럼 재귀 함수로 푸는 것이있음 위와 돌아가는 것은 비슷

def solution(numbers, target):
    if not numbers and target == 0 :
        return 1
    elif not numbers:
        return 0
    else:
        return solution(numbers[1:], target-numbers[0]) + solution(numbers[1:], target+numbers[0])

#마지막으로 dfs를 통해서 푸는 방법이 있음 
def dfs(nums, i, n, t):
    ret = 0
    if i==len(nums):
        if n==t: return 1
        else: return 0
    ret += dfs(nums, i+1, n+nums[i], t)
    ret += dfs(nums, i+1, n-nums[i], t)
    return ret

def solution(numbers, target):
    answer = dfs(numbers, 0, 0, target)
    return answer