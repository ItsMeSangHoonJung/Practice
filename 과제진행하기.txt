#흠 스택을 이용하는 구현문제였음 어렵지 않았음
#그런데 다른사람의 풀이를 봤을때 나처럼 이중반복문이 아닌 하나로만 푼 사람이 있었음
#그사람의 풀이는 깔끔하고(map 과 lambda의 활용) 이해가 어려웠음 -> 공부해보자
def timetonum(time):
    h,m=time.split(":")
    return int(h)*60+int(m)
def solution(plans):
    answer = []
    q=[]
    time = {}
    plans=sorted(plans,key=lambda x:x[1])
    plans.append(['end',"9999:00","1000000"])
    #print(plans)
    for i,plan in enumerate(plans):
        time[plan[0]]=int(plan[2])
        if i == 0 :
            prev_ass=plan[0]
            prev_ass_start=timetonum(plan[1])
            continue
        if time[prev_ass]<=timetonum(plan[1])-prev_ass_start:#시간안에 끝난경우
            answer.append(prev_ass)
            have_minute=timetonum(plan[1])-prev_ass_start-time[prev_ass]
            while q:
                n,t=q.pop()
                if t>have_minute:
                    t=t-have_minute
                    time[n]=t
                    q.append([n,t])
                    break
                else:
                    have_minute-=t
                    time[n]=0
                    answer.append(n)  
            time[prev_ass]=0
            
        else:#시간안에 안끝난경우
            time[prev_ass]-=timetonum(plan[1])-prev_ass_start
            q.append([prev_ass,time[prev_ass]])

        prev_ass=plan[0]
        prev_ass_start=timetonum(plan[1])

    return answer

def solution(plans):
    plans = sorted(map(lambda x: [x[0], int(x[1][:2]) * 60 + int(x[1][3:]), int(x[2])], plans), key=lambda x: -x[1])

    lst = []
    while plans:
        x = plans.pop()
        for i, v in enumerate(lst):
            if v[0] > x[1]:
                lst[i][0] += x[2]
        lst.append([x[1] + x[2], x[0]])
    lst.sort()

    return list(map(lambda x: x[1], lst))