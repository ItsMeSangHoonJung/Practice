#처음에 이렇게 했는데 시간초과뜸 
def solution(queries):
    gen = {1:["","Rr"],2:["","RR","Rr","Rr","rr"]}
    
    x=sorted(queries,reverse =True)[0][0]
    
    for i in range(3,x+1):
        gen[i]=[""]
        for s in (gen[i-1]):
            if s=="":
                continue
            if s == "RR":
                gen[i].append("RR")
                gen[i].append("RR")
                gen[i].append("RR")
                gen[i].append("RR")
            elif s == "Rr":
                gen[i].append("RR")
                gen[i].append("Rr")
                gen[i].append("Rr")
                gen[i].append("rr")
            else:
                gen[i].append("rr")
                gen[i].append("rr")
                gen[i].append("rr")
                gen[i].append("rr")
    answer = []
    for query in queries:
        answer.append(gen[query[0]][query[1]])
    return answer

#그래서 그냥 규칙이 보이는거 같아서 그걸로 품

def solution(queries):
    x=sorted(queries,reverse =True)[0][0]
    gen = { 1: "B", 2:"ABBC" }
    for i in range(3,x+1):
        gen[i]="A"*(4**(i-2))+gen[i-1]*2+"C"*(4**(i-2))
        
    answer = []
    for query in queries:
        answer.append(gen[query[0]][query[1]-1].replace("A","RR").replace("B","Rr").replace("C","rr"))
    
    return answer

#위랑 아래랑 똑같은데 왜안될까 아마 그 길이차이가 2배라 그런가 
#왜인지 모르겠음 연산의 양은 똑같을것 같은데
def solution(queries):
    x=sorted(queries,reverse =True)[0][0]
    gen = { 1: "Rr", 2:"RRRrRrrr" }
    for i in range(3,x+1):
        gen[i]="RR"*(4**(i-2))+gen[i-1]*2+"rr"*(4**(i-2))
    answer = []
    for query in queries:
        answer.append(gen[query[0]][(query[1]-1)*2:(query[1]-1)*2+2])
    
    return answer
# 아래처럼 재귀적으로 숫자를 통해서 문제를 푸는 사람도 있었음
#시대가 커지면 계산하는데 시간이 오래걸려서 이렇게 하면 시간이 짧아서 좋았음. 
def func(total, p):
    if total == 1:
        return 'Rr'
    k = total // 4
    if p < k + 1:
        return 'RR'
    if k + 1 <= p < 3 * k + 1:
        parent = func(k, (p - 1) // 4 + 1)
        if parent != 'Rr':
            return parent
        return ['RR', 'Rr', 'Rr', 'rr'][(p - 1) % 4]
    return 'rr'
def solution(queries):
    answer = []
    for n, p in queries:
        answer.append(func(4**(n-1), p))
    return answer
