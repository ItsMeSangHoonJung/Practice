def cp(cap,n,the_list):
    for i in range(n,-1,-1):
        if the_list[i]!=0:
            if the_list[i]<=cap:
                cap=cap-the_list[i]
                the_list[i]=0
            else:
                the_list[i]=the_list[i]-cap
                break

    return the_list
            
def solution(cap, n, deliveries, pickups):    
    answer, i = 0 , n-1   
    while(i>=0):
        
        if(deliveries[i] != 0 or pickups[i] != 0):
            times = max(deliveries[i]//cap,pickups[i]//cap,1)
            answer=answer+(i+1)*2*times
            deliveries=cp(times*cap,i,deliveries)
            pickups=cp(times*cap,i,pickups)
            
            if(deliveries[i] !=0 or pickups[i] != 0):
                i=i
            else:
                deliveries.pop()
                pickups.pop()
                i=i-1
            
            
        else:
            i=i-1
            continue
            
    return answer



def solution(cap, n, deliveries, pickups):
    while deliveries and not deliveries[-1]:
        deliveries.pop()
    while pickups and not pickups[-1]:
        pickups.pop()

    answer = 0
    while deliveries or pickups:
        answer += max(len(deliveries), len(pickups)) * 2

        deliveries_cap = pickups_cap = cap
        while deliveries:
            if deliveries[-1] <= deliveries_cap:
                deliveries_cap -= deliveries.pop()
            else:
                deliveries[-1] -= deliveries_cap
                break
        while pickups:
            if pickups[-1] <= pickups_cap:
                pickups_cap -= pickups.pop()
            else:
                pickups[-1] -= pickups_cap
                break

    return answer